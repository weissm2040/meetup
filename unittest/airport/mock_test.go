// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package airport_test

import (
	"github.com/weissm2040/meetup/unittest/airport"
	"sync"
)

var (
	lockAirplaneFetcherSaverMockFetch sync.RWMutex
	lockAirplaneFetcherSaverMockSave  sync.RWMutex
)

// Ensure, that AirplaneFetcherSaverMock does implement AirplaneFetcherSaver.
// If this is not the case, regenerate this file with moq.
var _ airport.AirplaneFetcherSaver = &AirplaneFetcherSaverMock{}

// AirplaneFetcherSaverMock is a mock implementation of AirplaneFetcherSaver.
//
//     func TestSomethingThatUsesAirplaneFetcherSaver(t *testing.T) {
//
//         // make and configure a mocked AirplaneFetcherSaver
//         mockedAirplaneFetcherSaver := &AirplaneFetcherSaverMock{
//             FetchFunc: func(in1 string) (airport.Airplane, error) {
// 	               panic("mock out the Fetch method")
//             },
//             SaveFunc: func(in1 airport.Airplane) (airport.Airplane, error) {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedAirplaneFetcherSaver in code that requires AirplaneFetcherSaver
//         // and then make assertions.
//
//     }
type AirplaneFetcherSaverMock struct {
	// FetchFunc mocks the Fetch method.
	FetchFunc func(in1 string) (airport.Airplane, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(in1 airport.Airplane) (airport.Airplane, error)

	// calls tracks calls to the methods.
	calls struct {
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// In1 is the in1 argument value.
			In1 airport.Airplane
		}
	}
}

// Fetch calls FetchFunc.
func (mock *AirplaneFetcherSaverMock) Fetch(in1 string) (airport.Airplane, error) {
	if mock.FetchFunc == nil {
		panic("AirplaneFetcherSaverMock.FetchFunc: method is nil but AirplaneFetcherSaver.Fetch was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockAirplaneFetcherSaverMockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	lockAirplaneFetcherSaverMockFetch.Unlock()
	return mock.FetchFunc(in1)
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//     len(mockedAirplaneFetcherSaver.FetchCalls())
func (mock *AirplaneFetcherSaverMock) FetchCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockAirplaneFetcherSaverMockFetch.RLock()
	calls = mock.calls.Fetch
	lockAirplaneFetcherSaverMockFetch.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *AirplaneFetcherSaverMock) Save(in1 airport.Airplane) (airport.Airplane, error) {
	if mock.SaveFunc == nil {
		panic("AirplaneFetcherSaverMock.SaveFunc: method is nil but AirplaneFetcherSaver.Save was just called")
	}
	callInfo := struct {
		In1 airport.Airplane
	}{
		In1: in1,
	}
	lockAirplaneFetcherSaverMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockAirplaneFetcherSaverMockSave.Unlock()
	return mock.SaveFunc(in1)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedAirplaneFetcherSaver.SaveCalls())
func (mock *AirplaneFetcherSaverMock) SaveCalls() []struct {
	In1 airport.Airplane
} {
	var calls []struct {
		In1 airport.Airplane
	}
	lockAirplaneFetcherSaverMockSave.RLock()
	calls = mock.calls.Save
	lockAirplaneFetcherSaverMockSave.RUnlock()
	return calls
}

var (
	lockFetcherSaverMockFetch sync.RWMutex
	lockFetcherSaverMockSave  sync.RWMutex
)

// Ensure, that FetcherSaverMock does implement FetcherSaver.
// If this is not the case, regenerate this file with moq.
var _ airport.FetcherSaver = &FetcherSaverMock{}

// FetcherSaverMock is a mock implementation of FetcherSaver.
//
//     func TestSomethingThatUsesFetcherSaver(t *testing.T) {
//
//         // make and configure a mocked FetcherSaver
//         mockedFetcherSaver := &FetcherSaverMock{
//             FetchFunc: func(in1 string) (airport.Airport, error) {
// 	               panic("mock out the Fetch method")
//             },
//             SaveFunc: func(in1 airport.Airport) (airport.Airport, error) {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedFetcherSaver in code that requires FetcherSaver
//         // and then make assertions.
//
//     }
type FetcherSaverMock struct {
	// FetchFunc mocks the Fetch method.
	FetchFunc func(in1 string) (airport.Airport, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(in1 airport.Airport) (airport.Airport, error)

	// calls tracks calls to the methods.
	calls struct {
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// In1 is the in1 argument value.
			In1 airport.Airport
		}
	}
}

// Fetch calls FetchFunc.
func (mock *FetcherSaverMock) Fetch(in1 string) (airport.Airport, error) {
	if mock.FetchFunc == nil {
		panic("FetcherSaverMock.FetchFunc: method is nil but FetcherSaver.Fetch was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockFetcherSaverMockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	lockFetcherSaverMockFetch.Unlock()
	return mock.FetchFunc(in1)
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//     len(mockedFetcherSaver.FetchCalls())
func (mock *FetcherSaverMock) FetchCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockFetcherSaverMockFetch.RLock()
	calls = mock.calls.Fetch
	lockFetcherSaverMockFetch.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *FetcherSaverMock) Save(in1 airport.Airport) (airport.Airport, error) {
	if mock.SaveFunc == nil {
		panic("FetcherSaverMock.SaveFunc: method is nil but FetcherSaver.Save was just called")
	}
	callInfo := struct {
		In1 airport.Airport
	}{
		In1: in1,
	}
	lockFetcherSaverMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockFetcherSaverMockSave.Unlock()
	return mock.SaveFunc(in1)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedFetcherSaver.SaveCalls())
func (mock *FetcherSaverMock) SaveCalls() []struct {
	In1 airport.Airport
} {
	var calls []struct {
		In1 airport.Airport
	}
	lockFetcherSaverMockSave.RLock()
	calls = mock.calls.Save
	lockFetcherSaverMockSave.RUnlock()
	return calls
}
