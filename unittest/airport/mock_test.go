// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package airport_test

import (
	"github.com/weissm2040/meetup/unittest/airport"
	"sync"
)

var (
	lockTransactionMockBegin  sync.RWMutex
	lockTransactionMockCommit sync.RWMutex
)

// Ensure, that TransactionMock does implement Transaction.
// If this is not the case, regenerate this file with moq.
var _ airport.Transaction = &TransactionMock{}

// TransactionMock is a mock implementation of Transaction.
//
//     func TestSomethingThatUsesTransaction(t *testing.T) {
//
//         // make and configure a mocked Transaction
//         mockedTransaction := &TransactionMock{
//             BeginFunc: func() error {
// 	               panic("mock out the Begin method")
//             },
//             CommitFunc: func() error {
// 	               panic("mock out the Commit method")
//             },
//         }
//
//         // use mockedTransaction in code that requires Transaction
//         // and then make assertions.
//
//     }
type TransactionMock struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func() error

	// CommitFunc mocks the Commit method.
	CommitFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
		}
		// Commit holds details about calls to the Commit method.
		Commit []struct {
		}
	}
}

// Begin calls BeginFunc.
func (mock *TransactionMock) Begin() error {
	if mock.BeginFunc == nil {
		panic("TransactionMock.BeginFunc: method is nil but Transaction.Begin was just called")
	}
	callInfo := struct {
	}{}
	lockTransactionMockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	lockTransactionMockBegin.Unlock()
	return mock.BeginFunc()
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//     len(mockedTransaction.BeginCalls())
func (mock *TransactionMock) BeginCalls() []struct {
} {
	var calls []struct {
	}
	lockTransactionMockBegin.RLock()
	calls = mock.calls.Begin
	lockTransactionMockBegin.RUnlock()
	return calls
}

// Commit calls CommitFunc.
func (mock *TransactionMock) Commit() error {
	if mock.CommitFunc == nil {
		panic("TransactionMock.CommitFunc: method is nil but Transaction.Commit was just called")
	}
	callInfo := struct {
	}{}
	lockTransactionMockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	lockTransactionMockCommit.Unlock()
	return mock.CommitFunc()
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//     len(mockedTransaction.CommitCalls())
func (mock *TransactionMock) CommitCalls() []struct {
} {
	var calls []struct {
	}
	lockTransactionMockCommit.RLock()
	calls = mock.calls.Commit
	lockTransactionMockCommit.RUnlock()
	return calls
}

var (
	lockAirplaneRepoMockFetch sync.RWMutex
	lockAirplaneRepoMockSave  sync.RWMutex
)

// Ensure, that AirplaneRepoMock does implement AirplaneRepo.
// If this is not the case, regenerate this file with moq.
var _ airport.AirplaneRepo = &AirplaneRepoMock{}

// AirplaneRepoMock is a mock implementation of AirplaneRepo.
//
//     func TestSomethingThatUsesAirplaneRepo(t *testing.T) {
//
//         // make and configure a mocked AirplaneRepo
//         mockedAirplaneRepo := &AirplaneRepoMock{
//             FetchFunc: func(in1 string) (airport.Airplane, error) {
// 	               panic("mock out the Fetch method")
//             },
//             SaveFunc: func(in1 airport.Airplane) (airport.Airplane, error) {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedAirplaneRepo in code that requires AirplaneRepo
//         // and then make assertions.
//
//     }
type AirplaneRepoMock struct {
	// FetchFunc mocks the Fetch method.
	FetchFunc func(in1 string) (airport.Airplane, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(in1 airport.Airplane) (airport.Airplane, error)

	// calls tracks calls to the methods.
	calls struct {
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// In1 is the in1 argument value.
			In1 airport.Airplane
		}
	}
}

// Fetch calls FetchFunc.
func (mock *AirplaneRepoMock) Fetch(in1 string) (airport.Airplane, error) {
	if mock.FetchFunc == nil {
		panic("AirplaneRepoMock.FetchFunc: method is nil but AirplaneRepo.Fetch was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockAirplaneRepoMockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	lockAirplaneRepoMockFetch.Unlock()
	return mock.FetchFunc(in1)
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//     len(mockedAirplaneRepo.FetchCalls())
func (mock *AirplaneRepoMock) FetchCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockAirplaneRepoMockFetch.RLock()
	calls = mock.calls.Fetch
	lockAirplaneRepoMockFetch.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *AirplaneRepoMock) Save(in1 airport.Airplane) (airport.Airplane, error) {
	if mock.SaveFunc == nil {
		panic("AirplaneRepoMock.SaveFunc: method is nil but AirplaneRepo.Save was just called")
	}
	callInfo := struct {
		In1 airport.Airplane
	}{
		In1: in1,
	}
	lockAirplaneRepoMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockAirplaneRepoMockSave.Unlock()
	return mock.SaveFunc(in1)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedAirplaneRepo.SaveCalls())
func (mock *AirplaneRepoMock) SaveCalls() []struct {
	In1 airport.Airplane
} {
	var calls []struct {
		In1 airport.Airplane
	}
	lockAirplaneRepoMockSave.RLock()
	calls = mock.calls.Save
	lockAirplaneRepoMockSave.RUnlock()
	return calls
}

var (
	lockAirportRepoMockFetch sync.RWMutex
	lockAirportRepoMockSave  sync.RWMutex
)

// Ensure, that AirportRepoMock does implement AirportRepo.
// If this is not the case, regenerate this file with moq.
var _ airport.AirportRepo = &AirportRepoMock{}

// AirportRepoMock is a mock implementation of AirportRepo.
//
//     func TestSomethingThatUsesAirportRepo(t *testing.T) {
//
//         // make and configure a mocked AirportRepo
//         mockedAirportRepo := &AirportRepoMock{
//             FetchFunc: func(in1 string) (airport.Airport, error) {
// 	               panic("mock out the Fetch method")
//             },
//             SaveFunc: func(in1 airport.Airport) (airport.Airport, error) {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedAirportRepo in code that requires AirportRepo
//         // and then make assertions.
//
//     }
type AirportRepoMock struct {
	// FetchFunc mocks the Fetch method.
	FetchFunc func(in1 string) (airport.Airport, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(in1 airport.Airport) (airport.Airport, error)

	// calls tracks calls to the methods.
	calls struct {
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// In1 is the in1 argument value.
			In1 airport.Airport
		}
	}
}

// Fetch calls FetchFunc.
func (mock *AirportRepoMock) Fetch(in1 string) (airport.Airport, error) {
	if mock.FetchFunc == nil {
		panic("AirportRepoMock.FetchFunc: method is nil but AirportRepo.Fetch was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockAirportRepoMockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	lockAirportRepoMockFetch.Unlock()
	return mock.FetchFunc(in1)
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//     len(mockedAirportRepo.FetchCalls())
func (mock *AirportRepoMock) FetchCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockAirportRepoMockFetch.RLock()
	calls = mock.calls.Fetch
	lockAirportRepoMockFetch.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *AirportRepoMock) Save(in1 airport.Airport) (airport.Airport, error) {
	if mock.SaveFunc == nil {
		panic("AirportRepoMock.SaveFunc: method is nil but AirportRepo.Save was just called")
	}
	callInfo := struct {
		In1 airport.Airport
	}{
		In1: in1,
	}
	lockAirportRepoMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockAirportRepoMockSave.Unlock()
	return mock.SaveFunc(in1)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedAirportRepo.SaveCalls())
func (mock *AirportRepoMock) SaveCalls() []struct {
	In1 airport.Airport
} {
	var calls []struct {
		In1 airport.Airport
	}
	lockAirportRepoMockSave.RLock()
	calls = mock.calls.Save
	lockAirportRepoMockSave.RUnlock()
	return calls
}
